<?php
$version = time();
?>
<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bitrix24 + Telegram ID</title>
    <link rel="stylesheet" href="/webapp/css/b24.css?v=<?= $version ?>">
    <script src="https://telegram.org/js/telegram-web-app.js"></script>

    <script>
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        const BITRIX_WEBHOOK = 'https://b24-saiczd.bitrix24.ru/rest/1/5sjww0g09qa2cc0u/';
        const TG_LEAD_FIELD = 'UF_CRM_1751577211'; // –ü–æ–ª–µ –ª–∏–¥–∞ –¥–ª—è Telegram ID
        const TG_CONTACT_FIELD = 'UF_CRM_6866F376B4A80'; // –ü–æ–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è Telegram ID

        // –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram User ID
        function getTelegramUserId() {
            try {
                let userId = null;
                if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
                    userId = Telegram.WebApp.initDataUnsafe.user.id.toString();
                    console.log("Telegram ID –∏–∑ WebApp:", userId);
                    localStorage.setItem('tgUserId', userId);
                }
                if (userId) return userId;

                const storedId = localStorage.getItem('tgUserId');
                if (storedId) return storedId;

                const urlParams = new URLSearchParams(window.location.search);
                if (urlParams.has('debug_tg_id')) {
                    return urlParams.get('debug_tg_id');
                }

                console.warn("Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return null;
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID:", e);
                return null;
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ debug-–ø–∞–Ω–µ–ª—å
        function addDebugMessage(message, type = 'info') {
            const debugDiv = document.getElementById('debug-content');
            if (!debugDiv) return;

            const messageDiv = document.createElement('div');
            messageDiv.className = `status-item ${type}`;
            messageDiv.innerHTML = `<strong>[${new Date().toLocaleTimeString()}]</strong> ${message}`;
            debugDiv.appendChild(messageDiv);
            debugDiv.scrollTop = debugDiv.scrollHeight;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        function initTelegramWebApp() {
            if (window.Telegram?.WebApp) {
                try {
                    Telegram.WebApp.ready();
                    if (Telegram.WebApp.isExpanded !== true) {
                        Telegram.WebApp.expand();
                    }
                    Telegram.WebApp.setHeaderColor('#6a11cb');
                    Telegram.WebApp.backgroundColor = '#6a11cb';
                    addDebugMessage("‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "success");
                } catch (e) {
                    addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: ${e.message}`, "error");
                }
            } else {
                addDebugMessage("‚ÑπÔ∏è Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "info");
            }
        }

        // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bitrix24 —Ñ–æ—Ä–º—ã
        function initBitrixForm() {
            const tgUserId = getTelegramUserId();
            if (!tgUserId) {
                addDebugMessage("‚ö†Ô∏è Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–æ—Ä–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–µ–≥–æ", "warning");
            }

            // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è Telegram ID
            const hiddenField = document.createElement('input');
            hiddenField.type = 'hidden';
            hiddenField.name = TG_LEAD_FIELD;
            hiddenField.value = tgUserId || '';
            hiddenField.id = 'b24-tg-field';

            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–æ—Ä–º—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
            const formContainer = document.querySelector('[data-b24-form]');
            if (formContainer) {
                formContainer.appendChild(hiddenField);
                addDebugMessage(`‚úÖ –°–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ ${TG_LEAD_FIELD} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ñ–æ—Ä–º—É`);
            } else {
                addDebugMessage("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω", "error");
            }

            // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
            document.addEventListener('b24formSubmit', function(event) {
                const leadId = event.detail?.result;
                if (leadId) {
                    document.getElementById('leadid-value').textContent = leadId;
                    addDebugMessage(`‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏–¥ #${leadId}`, "success");

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è –≤ –ª–∏–¥–µ
                    setTimeout(() => {
                        fetch(`${BITRIX_WEBHOOK}crm.lead.get.json?id=${leadId}`)
                            .then(response => response.json())
                            .then(leadData => {
                                const fieldValue = leadData.result?.[TG_LEAD_FIELD];
                                if (fieldValue === tgUserId) {
                                    addDebugMessage(`‚úÖ –ü–æ–ª–µ ${TG_LEAD_FIELD} –≤ –ª–∏–¥–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: ${fieldValue}`, "success");
                                } else {
                                    addDebugMessage(`‚ùå –ü–æ–ª–µ ${TG_LEAD_FIELD} –≤ –ª–∏–¥–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ! –ó–Ω–∞—á–µ–Ω–∏–µ: ${fieldValue || '–ø—É—Å—Ç–æ'}`, "error");
                                }

                                // –ü–æ–ª—É—á–∞–µ–º Contact ID —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                                getContactInfo(leadId, tgUserId);
                            })
                            .catch(error => {
                                console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–¥–∞:", error);
                                addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–¥–∞: ${error.message}`, "error");
                            });
                    }, 3000);
                } else {
                    addDebugMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ª–∏–¥–∞", "error");
                }
            });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
        function getContactInfo(leadId, tgUserId, attempt = 1) {
            const MAX_ATTEMPTS = 5;
            const RETRY_DELAY = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã

            console.log(`–ü–æ–ø—ã—Ç–∫–∞ #${attempt} –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –ª–∏–¥–∞ ${leadId}`);
            addDebugMessage(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ #${attempt}: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –ª–∏–¥–∞ ${leadId}`, "info");

            fetch(`${BITRIX_WEBHOOK}crm.lead.get.json?id=${leadId}`)
                .then(response => response.json())
                .then(leadData => {
                    const contactId = leadData.result?.CONTACT_ID;

                    if (contactId) {
                        console.log("Contact ID:", contactId);
                        addDebugMessage(`‚úÖ –ü–æ–ª—É—á–µ–Ω Contact ID: ${contactId}`, "success");

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–µ
                        checkContactField(contactId, tgUserId);

                    } else {
                        console.log("CONTACT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏–¥–µ");
                        addDebugMessage(`‚ÑπÔ∏è CONTACT_ID –≤ –ª–∏–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω`, "info");

                        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
                        if (attempt < MAX_ATTEMPTS) {
                            setTimeout(() => getContactInfo(leadId, tgUserId, attempt + 1), RETRY_DELAY);
                        } else {
                            addDebugMessage(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Contact ID –ø–æ—Å–ª–µ ${MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫`, "error");
                        }
                    }
                })
                .catch(error => {
                    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–∞:", error);
                    addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–∞: ${error.message}`, "error");

                    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    if (attempt < MAX_ATTEMPTS) {
                        setTimeout(() => getContactInfo(leadId, tgUserId, attempt + 1), RETRY_DELAY);
                    }
                });
        }

        // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        function checkContactField(contactId, tgUserId) {
            console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ #${contactId}`);
            addDebugMessage(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ #${contactId}`, "info");

            fetch(`${BITRIX_WEBHOOK}crm.contact.get.json?id=${contactId}`)
                .then(response => response.json())
                .then(contactData => {
                    const contactFieldValue = contactData.result?.[TG_CONTACT_FIELD];
                    console.log("Contact field value:", contactFieldValue);

                    if (contactFieldValue === tgUserId) {
                        addDebugMessage(`‚úÖ –ü–æ–ª–µ ${TG_CONTACT_FIELD} –≤ –∫–æ–Ω—Ç–∞–∫—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: ${contactFieldValue}`, "success");
                    } else {
                        addDebugMessage(`‚ùå –ü–æ–ª–µ ${TG_CONTACT_FIELD} –≤ –∫–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ! –ó–Ω–∞—á–µ–Ω–∏–µ: ${contactFieldValue || '–ø—É—Å—Ç–æ'}`, "error");
                    }
                })
                .catch(error => {
                    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:", error);
                    addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${error.message}`, "error");
                });
        }
    </script>

    <style>
        .id-display-container {
            display: flex;
            gap: 15px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        .id-display {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            flex: 1;
            min-width: 150px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .id-display strong {
            display: block;
            margin-bottom: 5px;
            color: #495057;
            font-size: 14px;
        }

        .id-value {
            font-size: 18px;
            font-weight: bold;
            word-break: break-all;
        }

        .id-value.success {
            color: #28a745;
        }

        .id-value.error {
            color: #dc3545;
        }

        .id-value.waiting {
            color: #6c757d;
        }

        @media (max-width: 768px) {
            .id-display-container {
                flex-direction: column;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>Bitrix24 + Telegram ID</h1>
            <p>–ü–æ–ª–µ –¥–ª—è Telegram ID: <code>UF_CRM_1751577211</code> (–≤ –ª–∏–¥–µ)</p>
        </div>

        <div class="debug-panel">
            <div class="panel-title">
                <h3>–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h3>
                <button class="refresh-btn" onclick="location.reload()">–û–±–Ω–æ–≤–∏—Ç—å</button>
            </div>
            <div id="debug-content">
                <div class="status-item">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</div>
            </div>
        </div>

        <div class="instructions">
            <h3>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h3>
            <ol class="steps">
                <li class="step">–í—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ –≤–∏–¥–∂–µ—Ç</li>
                <li class="step">Telegram ID –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ</li>
                <li class="step">–°–æ–∑–¥–∞–µ—Ç—Å—è –ª–∏–¥ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –ø–æ–ª–µ–º Telegram ID</li>
                <li class="step">–õ–∏–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç</li>
                <li class="step">–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è –≤ –ª–∏–¥–µ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–µ</li>
            </ol>

            <div class="id-display-container">
                <div class="id-display">
                    <strong>Telegram ID:</strong>
                    <div id="tgid-value" class="id-value waiting">–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...</div>
                </div>
                <div class="id-display">
                    <strong>Lead ID:</strong>
                    <div id="leadid-value" class="id-value waiting">–û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã...</div>
                </div>
            </div>
        </div>

        <!-- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Bitrix24 -->
        <script>
            (function(w, d, u) {
                // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
                w.b24formResult = function(result) {
                    const event = new CustomEvent('b24formSubmit', {
                        detail: result
                    });
                    document.dispatchEvent(event);
                };

                var s = d.createElement('script');
                s.async = true;
                s.src = u + '?' + (Date.now() / 60000 | 0);
                var h = d.getElementsByTagName('script')[0];
                h.parentNode.insertBefore(s, h);
            })(window, document, 'https://cdn-ru.bitrix24.ru/b34052738/crm/site_button/loader_1_wugrzo.js');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
            document.addEventListener('DOMContentLoaded', function() {
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º—ã Bitrix24
                window.b24form = {
                    onload: function(form) {
                        console.log("Bitrix24 Form loaded");
                        addDebugMessage("‚úÖ –§–æ—Ä–º–∞ Bitrix24 –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "success");

                        // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        form.onSubmit = function(callback) {
                            this._callback = callback;
                        };

                        // –ü–µ—Ä–µ—Ö–≤–∞—Ç –º–µ—Ç–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                        const originalSubmit = form.submit;
                        form.submit = function() {
                            const result = originalSubmit.apply(this, arguments);

                            if (result && result.then) {
                                result.then(data => {
                                    if (this._callback) this._callback(data);
                                    window.b24formResult(data);
                                }).catch(error => {
                                    console.error("Form submit error:", error);
                                    addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–∞: ${error.message}`, "error");
                                });
                            }
                            return result;
                        };
                    }
                };
            });
        </script>

        <div data-b24-form="1" data-skip-moving="true"></div>

        <div style="text-align: center; margin-top: 30px;">
            <a href="/" class="back-btn">
                <span class="btn-icon">‚Üê</span> –ù–∞ –≥–ª–∞–≤–Ω—É—é
            </a>
        </div>
    </div>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            initTelegramWebApp();
            initBitrixForm();

            const tgUserId = getTelegramUserId();
            const tgidElement = document.getElementById('tgid-value');

            if (tgidElement) {
                if (tgUserId) {
                    tgidElement.textContent = tgUserId;
                    tgidElement.className = 'id-value success';
                    addDebugMessage(`‚úÖ Telegram ID –ø–æ–ª—É—á–µ–Ω: ${tgUserId}`, 'success');
                    localStorage.setItem('tgUserId', tgUserId);
                } else {
                    tgidElement.textContent = '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω';
                    tgidElement.className = 'id-value error';
                    addDebugMessage('‚ùå Telegram ID –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω', 'error');
                }
            }

            addDebugMessage(`<a href="?debug_tg_id=TEST123">–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å ID: TEST123</a>`, 'info');
            addDebugMessage(`–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${new Date().toLocaleString()}`, 'info');
            addDebugMessage(`–í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞: ${<?= $version ?>}`, 'info');
        });
    </script>
</body>

</html>