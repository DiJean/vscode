<?php
$version = time();
?>
<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bitrix24 + Telegram ID</title>
    <link rel="stylesheet" href="/webapp/css/b24.css?v=<?= $version ?>">

    <!-- –ó–∞–≥—Ä—É–∑–∫–∞ Telegram WebApp API -->
    <script src="https://telegram.org/js/telegram-web-app.js"></script>

    <script>
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        const BITRIX_WEBHOOK = 'https://b24-saiczd.bitrix24.ru/rest/1/5sjww0g09qa2cc0u/';
        const TG_CONTACT_FIELD = 'UF_CRM_6866F376B4A80'; // –ü–æ–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è Telegram ID

        // –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram User ID
        function getTelegramUserId() {
            try {
                let userId = null;

                // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ WebApp
                if (window.Telegram && Telegram.WebApp && Telegram.WebApp.initDataUnsafe?.user?.id) {
                    userId = Telegram.WebApp.initDataUnsafe.user.id.toString();
                    console.log("Telegram ID –∏–∑ WebApp:", userId);
                    localStorage.setItem('tgUserId', userId);
                }

                if (userId) return userId;

                // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ localStorage
                const storedId = localStorage.getItem('tgUserId');
                if (storedId) {
                    console.log("Telegram ID –∏–∑ localStorage:", storedId);
                    return storedId;
                }

                // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
                const urlParams = new URLSearchParams(window.location.search);
                if (urlParams.has('debug_tg_id')) {
                    return urlParams.get('debug_tg_id');
                }

                console.warn("Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return null;
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID:", e);
                return null;
            }
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞ –ø–æ ID
        async function getLeadData(leadId) {
            try {
                if (isNaN(leadId)) {
                    throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ª–∏–¥–∞: ${leadId}`);
                }

                const response = await fetch(`${BITRIX_WEBHOOK}crm.lead.get.json?id=${leadId}`);
                const result = await response.json();

                if (result.error) {
                    throw new Error(`Bitrix API Error: ${result.error} - ${result.error_description}`);
                }

                return result.result;
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞:", e);
                addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞ #${leadId}: ${e.message}`, 'error');
                return null;
            }
        }

        // –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ email
        async function findContactByLeadData(leadData) {
            try {
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
                let phone = null;
                if (leadData.PHONE && leadData.PHONE.length > 0) {
                    phone = leadData.PHONE[0].VALUE.replace(/[^0-9]/g, '');
                }

                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ email
                let email = null;
                if (leadData.EMAIL && leadData.EMAIL.length > 0) {
                    email = leadData.EMAIL[0].VALUE;
                }

                if (!phone && !email) {
                    addDebugMessage("‚ùå –í –ª–∏–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞", 'error');
                    return null;
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
                let filter = {};
                if (phone) filter['PHONE'] = phone;
                if (email) filter['EMAIL'] = email;

                const requestBody = {
                    filter: filter,
                    select: ["ID"]
                };

                const response = await fetch(`${BITRIX_WEBHOOK}crm.contact.list.json`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestBody)
                });

                const result = await response.json();

                if (result.error) {
                    throw new Error(`Bitrix API Error: ${result.error} - ${result.error_description}`);
                }

                if (result.result && result.result.length > 0) {
                    return result.result[0].ID;
                }

                return null;
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞:", e);
                addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${e.message}`, 'error');
                return null;
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Bitrix24
        async function updateContactInBitrix(contactId, tgUserId) {
            try {
                if (!contactId) {
                    throw new Error("CONTACT_ID –Ω–µ –ø–æ–ª—É—á–µ–Ω");
                }

                const requestBody = {
                    id: parseInt(contactId),
                    fields: {
                        [TG_CONTACT_FIELD]: tgUserId
                    }
                };

                console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:", requestBody);

                const response = await fetch(`${BITRIX_WEBHOOK}crm.contact.update.json`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestBody)
                });

                const result = await response.json();

                if (result.error) {
                    throw new Error(`Bitrix API Error: ${result.error} - ${result.error_description}`);
                }

                return result.result;
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:", error);
                addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ #${contactId}: ${error.message}`, 'error');
                return false;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞
        async function processCreatedLead(leadId, tgUserId) {
            addDebugMessage(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–∞ #${leadId}`, 'info');

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ —Å Lead ID
            const leadIdElement = document.getElementById('leadid-value');
            if (leadIdElement) {
                leadIdElement.textContent = leadId;
                leadIdElement.className = 'id-value success';
            }

            // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await new Promise(resolve => setTimeout(resolve, 2000));

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
            const leadData = await getLeadData(leadId);

            if (!leadData) {
                addDebugMessage(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ #${leadId}`, 'error');
                return;
            }

            // –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –¥–∞–Ω–Ω—ã–º –ª–∏–¥–∞
            const contactId = await findContactByLeadData(leadData);

            if (!contactId) {
                addDebugMessage(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ª–∏–¥–∞ #${leadId}`, 'error');
                return;
            }

            addDebugMessage(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç #${contactId} –¥–ª—è –ª–∏–¥–∞ #${leadId}`, 'success');

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ —Å Contact ID
            const contactIdElement = document.getElementById('contactid-value');
            if (contactIdElement) {
                contactIdElement.textContent = contactId;
                contactIdElement.className = 'id-value success';
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            const updateSuccess = await updateContactInBitrix(contactId, tgUserId);

            if (updateSuccess) {
                addDebugMessage(`‚úÖ Telegram ID –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–∞–∫—Ç #${contactId}`, 'success');
            } else {
                addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ #${contactId}`, 'error');
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ debug-–ø–∞–Ω–µ–ª—å
        function addDebugMessage(message, type = 'info') {
            const debugDiv = document.getElementById('debug-content');
            if (!debugDiv) {
                console.error("Debug panel not found");
                return;
            }

            const messageDiv = document.createElement('div');
            messageDiv.className = `status-item ${type}`;

            const timestamp = new Date().toLocaleTimeString();
            messageDiv.innerHTML = `<strong>[${timestamp}]</strong> ${message}`;

            debugDiv.appendChild(messageDiv);
            debugDiv.scrollTop = debugDiv.scrollHeight;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        function initTelegramWebApp() {
            if (window.Telegram && Telegram.WebApp) {
                try {
                    Telegram.WebApp.ready();

                    if (Telegram.WebApp.isExpanded !== true && typeof Telegram.WebApp.expand === 'function') {
                        Telegram.WebApp.expand();
                    }

                    Telegram.WebApp.backgroundColor = '#6a11cb';
                    if (typeof Telegram.WebApp.setHeaderColor === 'function') {
                        Telegram.WebApp.setHeaderColor('#6a11cb');
                    }

                    addDebugMessage("‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "success");
                } catch (e) {
                    console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:", e);
                    addDebugMessage(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: ${e.message}`, "error");
                }
            } else {
                addDebugMessage("‚ÑπÔ∏è Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "info");
            }
        }
    </script>

    <style>
        .id-display-container {
            display: flex;
            gap: 15px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        .id-display {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            flex: 1;
            min-width: 150px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .id-display strong {
            display: block;
            margin-bottom: 5px;
            color: #495057;
            font-size: 14px;
        }

        .id-value {
            font-size: 18px;
            font-weight: bold;
            word-break: break-all;
        }

        .id-value.success {
            color: #28a745;
        }

        .id-value.error {
            color: #dc3545;
        }

        .id-value.waiting {
            color: #6c757d;
        }

        @media (max-width: 768px) {
            .id-display-container {
                flex-direction: column;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>Bitrix24 + Telegram ID</h1>
            <p>–ü–æ–ª–µ –¥–ª—è Telegram ID: <code>UF_CRM_6866F376B4A80</code></p>
        </div>

        <div class="debug-panel">
            <div class="panel-title">
                <h3>–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h3>
                <button class="refresh-btn" onclick="location.reload()">–û–±–Ω–æ–≤–∏—Ç—å</button>
            </div>
            <div id="debug-content">
                <div class="status-item">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</div>
            </div>
        </div>

        <div class="instructions">
            <h3>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h3>
            <ol class="steps">
                <li class="step">–í—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ –≤–∏–¥–∂–µ—Ç</li>
                <li class="step">–°–æ–∑–¥–∞–µ—Ç—Å—è –ª–∏–¥ –≤ Bitrix24</li>
                <li class="step">–õ–∏–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫—É</li>
                <li class="step">–ú—ã –∏—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ª–∏–¥–∞</li>
                <li class="step">–î–æ–±–∞–≤–ª—è–µ–º Telegram ID –≤ –ø–æ–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞</li>
            </ol>

            <div class="id-display-container">
                <div class="id-display">
                    <strong>Telegram ID:</strong>
                    <div id="tgid-value" class="id-value waiting">–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...</div>
                </div>

                <div class="id-display">
                    <strong>Lead ID:</strong>
                    <div id="leadid-value" class="id-value waiting">–û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã...</div>
                </div>

                <div class="id-display">
                    <strong>Contact ID:</strong>
                    <div id="contactid-value" class="id-value waiting">–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...</div>
                </div>
            </div>
        </div>

        <!-- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Bitrix24 -->
        <script>
            (function(w, d, u) {
                var s = d.createElement('script');
                s.async = true;
                s.src = u + '?' + (Date.now() / 60000 | 0);
                var h = d.getElementsByTagName('script')[0];
                h.parentNode.insertBefore(s, h);

                // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º
                w.b24form = {
                    onload: function(form) {
                        console.log("Bitrix24 Form loaded");
                        addDebugMessage("‚úÖ –§–æ—Ä–º–∞ Bitrix24 –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "success");

                        // –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                        const leadIdElement = document.getElementById('leadid-value');
                        const contactIdElement = document.getElementById('contactid-value');

                        if (leadIdElement) {
                            leadIdElement.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã...';
                            leadIdElement.className = 'id-value waiting';
                        }

                        if (contactIdElement) {
                            contactIdElement.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...';
                            contactIdElement.className = 'id-value waiting';
                        }

                        form.onSubmit(function(result) {
                            if (result && result.result) {
                                const leadId = result.result;
                                const tgUserId = getTelegramUserId();

                                if (tgUserId) {
                                    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–∞ #${leadId} —Å Telegram ID: ${tgUserId}`);
                                    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                                    processCreatedLead(leadId, tgUserId);
                                }
                            }
                        });
                    }
                };
            })(window, document, 'https://cdn-ru.bitrix24.ru/b34052738/crm/site_button/loader_1_wugrzo.js');
        </script>
        <div data-b24-form="1" data-skip-moving="true"></div>

        <div style="text-align: center; margin-top: 30px;">
            <a href="/" class="back-btn">
                <span class="btn-icon">‚Üê</span> –ù–∞ –≥–ª–∞–≤–Ω—É—é
            </a>
        </div>
    </div>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            initTelegramWebApp();

            const tgUserId = getTelegramUserId();
            const tgidElement = document.getElementById('tgid-value');

            if (!tgidElement) {
                console.error("–≠–ª–µ–º–µ–Ω—Ç —Å id 'tgid-value' –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            if (tgUserId) {
                tgidElement.textContent = tgUserId;
                tgidElement.className = 'id-value success';
                addDebugMessage(`‚úÖ Telegram ID –ø–æ–ª—É—á–µ–Ω: ${tgUserId}`, 'success');
                addDebugMessage(`ID –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–ª–µ ${TG_CONTACT_FIELD} –∫–æ–Ω—Ç–∞–∫—Ç–∞`, 'success');
                localStorage.setItem('tgUserId', tgUserId);
            } else {
                tgidElement.textContent = '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω';
                tgidElement.className = 'id-value error';
                addDebugMessage('‚ùå Telegram ID –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω', 'error');
                addDebugMessage('–§–æ—Ä–º—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ Telegram ID', 'warning');
            }

            addDebugMessage(`<a href="?debug_tg_id=TEST123">–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å ID: TEST123</a>`, 'info');
            addDebugMessage(`–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${new Date().toLocaleString()}`, 'info');
        });
    </script>
</body>

</html>